window.exclude = [];
window.watch = true;
window.environment = 'release';
window.localMode = 'build';

window.appConfig = {
  showDebugger: false,
  showExperimentalFeatures: false,
  workspaces: [
    {
      id: 'local',
      label: 'local',
      projectGraphUrl: 'project-graph.json',
      taskGraphUrl: 'task-graph.json',
      taskInputsUrl: 'task-inputs.json',
      sourceMapsUrl: 'source-maps.json',
    },
  ],
  defaultWorkspaceId: 'local',
};
window.projectGraphResponse = {
  hash: '83af487e158e9cf2eb2e1b401970488ca96907b8db3738a47a1f20e866ee6977',
  projects: [
    {
      name: 'infrastructure',
      type: 'lib',
      data: {
        root: 'libs/infrastructure',
        name: 'infrastructure',
        projectType: 'library',
        tags: ['npm:private', 'scope:infrastructure', 'type:lib', 'layer:infrastructure'],
        metadata: {
          targetGroups: {},
          js: {
            packageName: '@dfs-invest-flow/infrastructure',
            packageMain: './src/index.js',
            isInPackageManagerWorkspaces: true,
          },
        },
        targets: {
          build: {
            executor: '@nx/js:tsc',
            outputs: ['{options.outputPath}'],
            options: {
              outputPath: 'dist/libs/infrastructure',
              main: 'libs/infrastructure/src/index.ts',
              tsConfig: 'libs/infrastructure/tsconfig.lib.json',
              assets: ['libs/infrastructure/*.md'],
            },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: ['production', '^production', 'sharedGlobals'],
          },
          lint: {
            executor: '@nx/eslint:lint',
            outputs: ['{options.outputFile}'],
            options: {
              lintFilePatterns: ['libs/infrastructure/**/*.ts', 'libs/infrastructure/**/*.tsx'],
              parserOptions: {
                project: [
                  'libs/infrastructure/tsconfig.lib.json',
                  'libs/infrastructure/tsconfig.spec.json',
                ],
              },
            },
            configurations: {},
            parallelism: true,
            inputs: ['default', '{workspaceRoot}/eslint.config.mjs'],
          },
          test: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{projectRoot}'],
            options: { jestConfig: 'libs/infrastructure/jest.config.cjs' },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: [
              'default',
              '^production',
              'sharedGlobals',
              '{workspaceRoot}/jest.config.cjs',
              '{workspaceRoot}/jest.preset.cjs',
            ],
          },
          'type-check': {
            executor: 'nx:run-commands',
            options: { command: 'tsc --noEmit -p libs/infrastructure/tsconfig.lib.json' },
            configurations: {},
            parallelism: true,
            inputs: ['default', 'sharedGlobals'],
          },
        },
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        sourceRoot: 'libs/infrastructure/src',
        implicitDependencies: [],
      },
    },
    {
      name: 'application',
      type: 'lib',
      data: {
        root: 'libs/application',
        name: 'application',
        projectType: 'library',
        tags: ['npm:private', 'scope:application', 'type:lib', 'layer:application'],
        metadata: {
          targetGroups: {},
          js: {
            packageName: '@dfs-invest-flow/application',
            packageMain: './src/index.js',
            isInPackageManagerWorkspaces: true,
          },
        },
        targets: {
          build: {
            executor: '@nx/js:tsc',
            outputs: ['{options.outputPath}'],
            options: {
              outputPath: 'dist/libs/application',
              main: 'libs/application/src/index.ts',
              tsConfig: 'libs/application/tsconfig.lib.json',
              assets: ['libs/application/*.md'],
            },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: ['production', '^production', 'sharedGlobals'],
          },
          lint: {
            executor: '@nx/eslint:lint',
            outputs: ['{options.outputFile}'],
            options: {
              lintFilePatterns: ['libs/application/**/*.ts', 'libs/application/**/*.tsx'],
              parserOptions: {
                project: [
                  'libs/application/tsconfig.lib.json',
                  'libs/application/tsconfig.spec.json',
                ],
              },
            },
            configurations: {},
            parallelism: true,
            inputs: ['default', '{workspaceRoot}/eslint.config.mjs'],
          },
          test: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{projectRoot}'],
            options: { jestConfig: 'libs/application/jest.config.cjs' },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: [
              'default',
              '^production',
              'sharedGlobals',
              '{workspaceRoot}/jest.config.cjs',
              '{workspaceRoot}/jest.preset.cjs',
            ],
          },
          'type-check': {
            executor: 'nx:run-commands',
            options: { command: 'tsc --noEmit -p libs/application/tsconfig.lib.json' },
            configurations: {},
            parallelism: true,
            inputs: ['default', 'sharedGlobals'],
          },
        },
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        sourceRoot: 'libs/application/src',
        implicitDependencies: [],
      },
    },
    {
      name: 'api-e2e',
      type: 'e2e',
      data: {
        root: 'apps/api-e2e',
        name: 'api-e2e',
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        projectType: 'application',
        implicitDependencies: ['api'],
        targets: {
          e2e: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{e2eProjectRoot}'],
            options: { jestConfig: 'apps/api-e2e/jest.config.ts', passWithNoTests: true },
            dependsOn: ['api:build'],
            configurations: {},
            parallelism: true,
          },
        },
        tags: [],
      },
    },
    {
      name: 'domain',
      type: 'lib',
      data: {
        root: 'libs/domain',
        name: 'domain',
        projectType: 'library',
        tags: ['npm:private', 'scope:domain', 'type:lib', 'layer:domain'],
        metadata: {
          targetGroups: {},
          js: {
            packageName: '@dfs-invest-flow/domain',
            packageMain: './src/index.js',
            isInPackageManagerWorkspaces: true,
          },
        },
        targets: {
          build: {
            executor: '@nx/js:tsc',
            outputs: ['{options.outputPath}'],
            options: {
              outputPath: 'dist/libs/domain',
              main: 'libs/domain/src/index.ts',
              tsConfig: 'libs/domain/tsconfig.lib.json',
              assets: ['libs/domain/*.md'],
            },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: ['production', '^production', 'sharedGlobals'],
          },
          lint: {
            executor: '@nx/eslint:lint',
            outputs: ['{options.outputFile}'],
            options: {
              lintFilePatterns: ['libs/domain/**/*.ts', 'libs/domain/**/*.tsx'],
              parserOptions: {
                project: ['libs/domain/tsconfig.lib.json', 'libs/domain/tsconfig.spec.json'],
              },
            },
            configurations: {},
            parallelism: true,
            inputs: ['default', '{workspaceRoot}/eslint.config.mjs'],
          },
          test: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{projectRoot}'],
            options: { jestConfig: 'libs/domain/jest.config.cjs' },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: [
              'default',
              '^production',
              'sharedGlobals',
              '{workspaceRoot}/jest.config.cjs',
              '{workspaceRoot}/jest.preset.cjs',
            ],
          },
          'type-check': {
            executor: 'nx:run-commands',
            options: { command: 'tsc --noEmit -p libs/domain/tsconfig.lib.json' },
            configurations: {},
            parallelism: true,
            inputs: ['default', 'sharedGlobals'],
          },
        },
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        sourceRoot: 'libs/domain/src',
        implicitDependencies: [],
      },
    },
    {
      name: 'shared',
      type: 'lib',
      data: {
        root: 'libs/shared',
        name: 'shared',
        projectType: 'library',
        tags: ['npm:private', 'scope:shared', 'type:lib', 'layer:shared'],
        metadata: {
          targetGroups: {},
          js: {
            packageName: '@dfs-invest-flow/shared',
            packageMain: './src/index.js',
            isInPackageManagerWorkspaces: true,
          },
        },
        targets: {
          build: {
            executor: '@nx/js:tsc',
            outputs: ['{options.outputPath}'],
            options: {
              outputPath: 'dist/libs/shared',
              main: 'libs/shared/src/index.ts',
              tsConfig: 'libs/shared/tsconfig.lib.json',
              assets: ['libs/shared/*.md'],
            },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: ['production', '^production', 'sharedGlobals'],
          },
          lint: {
            executor: '@nx/eslint:lint',
            outputs: ['{options.outputFile}'],
            options: {
              lintFilePatterns: ['libs/shared/**/*.ts', 'libs/shared/**/*.tsx'],
              parserOptions: {
                project: ['libs/shared/tsconfig.lib.json', 'libs/shared/tsconfig.spec.json'],
              },
            },
            configurations: {},
            parallelism: true,
            inputs: ['default', '{workspaceRoot}/eslint.config.mjs'],
          },
          test: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{projectRoot}'],
            options: { jestConfig: 'libs/shared/jest.config.cjs' },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: [
              'default',
              '^production',
              'sharedGlobals',
              '{workspaceRoot}/jest.config.cjs',
              '{workspaceRoot}/jest.preset.cjs',
            ],
          },
          'type-check': {
            executor: 'nx:run-commands',
            options: { command: 'tsc --noEmit -p libs/shared/tsconfig.lib.json' },
            configurations: {},
            parallelism: true,
            inputs: ['default', 'sharedGlobals'],
          },
        },
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        sourceRoot: 'libs/shared/src',
        implicitDependencies: [],
      },
    },
    {
      name: 'api',
      type: 'app',
      data: {
        root: 'apps/api',
        name: 'api',
        projectType: 'application',
        tags: ['npm:private', 'scope:api', 'type:app', 'framework:nest'],
        metadata: {
          targetGroups: {},
          js: { packageName: '@dfs-invest-flow/api', isInPackageManagerWorkspaces: true },
        },
        targets: {
          build: {
            executor: '@nx/webpack:webpack',
            outputs: ['{options.outputPath}'],
            defaultConfiguration: 'production',
            options: {
              target: 'node',
              compiler: 'tsc',
              outputPath: 'dist/apps/api',
              main: 'apps/api/src/main.ts',
              tsConfig: 'apps/api/tsconfig.app.json',
              assets: ['apps/api/src/assets'],
              webpackConfig: 'apps/api/webpack.config.cjs',
              generatePackageJson: true,
            },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: ['production', '^production', 'sharedGlobals'],
          },
          lint: {
            executor: '@nx/eslint:lint',
            outputs: ['{options.outputFile}'],
            options: {
              lintFilePatterns: ['apps/api/**/*.ts'],
              parserOptions: {
                project: ['apps/api/tsconfig.app.json', 'apps/api/tsconfig.spec.json'],
              },
            },
            configurations: {},
            parallelism: true,
            inputs: ['default', '{workspaceRoot}/eslint.config.mjs'],
          },
          test: {
            executor: '@nx/jest:jest',
            outputs: ['{workspaceRoot}/coverage/{projectRoot}'],
            options: { jestConfig: 'apps/api/jest.config.cjs', passWithNoTests: true },
            configurations: {},
            parallelism: true,
            dependsOn: ['^build'],
            inputs: [
              'default',
              '^production',
              'sharedGlobals',
              '{workspaceRoot}/jest.config.cjs',
              '{workspaceRoot}/jest.preset.cjs',
            ],
          },
          'type-check': {
            executor: 'nx:run-commands',
            options: { command: 'tsc --noEmit -p apps/api/tsconfig.app.json' },
            configurations: {},
            parallelism: true,
            inputs: ['default', 'sharedGlobals'],
          },
        },
        $schema: '../../node_modules/nx/schemas/project-schema.json',
        sourceRoot: 'apps/api/src',
        implicitDependencies: [],
      },
    },
  ],
  dependencies: {
    infrastructure: [{ source: 'infrastructure', target: 'domain', type: 'static' }],
    application: [],
    'api-e2e': [{ source: 'api-e2e', target: 'api', type: 'implicit' }],
    domain: [],
    shared: [],
    api: [{ source: 'api', target: 'infrastructure', type: 'static' }],
  },
  fileMap: {
    'api-e2e': [
      { file: 'apps/api-e2e/jest.config.ts', hash: '14810772873632897745' },
      { file: 'apps/api-e2e/project.json', hash: '8704242690917871101' },
      { file: 'apps/api-e2e/src/api/api.spec.ts', hash: '110394728024017389' },
      { file: 'apps/api-e2e/src/support/global-setup.ts', hash: '2568409276037275290' },
      { file: 'apps/api-e2e/src/support/global-teardown.ts', hash: '5275447082211835490' },
      { file: 'apps/api-e2e/src/support/test-setup.ts', hash: '1746810003853056313' },
      { file: 'apps/api-e2e/tsconfig.json', hash: '15443990093475294480' },
      { file: 'apps/api-e2e/tsconfig.spec.json', hash: '14954872453723519891' },
    ],
    api: [
      { file: 'apps/api/jest.config.cjs', hash: '6166975277286888698' },
      { file: 'apps/api/package.json', hash: '8522526784028264609', deps: ['infrastructure'] },
      { file: 'apps/api/project.json', hash: '2910741427203342616' },
      { file: 'apps/api/src/app/app.controller.spec.ts', hash: '41740481875501851' },
      { file: 'apps/api/src/app/app.controller.ts', hash: '17054397105740833093' },
      {
        file: 'apps/api/src/app/app.module.ts',
        hash: '8769868459188957989',
        deps: ['infrastructure'],
      },
      { file: 'apps/api/src/app/app.placeholder.spec.ts', hash: '6886527786206408380' },
      { file: 'apps/api/src/app/app.service.spec.ts', hash: '13111976464657524091' },
      { file: 'apps/api/src/app/app.service.ts', hash: '9967902337593410053' },
      { file: 'apps/api/src/assets/.gitkeep', hash: '3244421341483603138' },
      { file: 'apps/api/src/main.ts', hash: '14819337011353640225' },
      { file: 'apps/api/tsconfig.app.json', hash: '12492056768848509517' },
      { file: 'apps/api/tsconfig.json', hash: '3490524966360018312' },
      { file: 'apps/api/tsconfig.spec.json', hash: '16810438188172722813' },
      { file: 'apps/api/webpack.config.cjs', hash: '8890592528386182663' },
    ],
    shared: [
      { file: 'libs/shared/README.md', hash: '13497741195335207366' },
      { file: 'libs/shared/jest.config.cjs', hash: '7100839098075446499' },
      {
        file: 'libs/shared/libs/infrastructure/src/queue/constants/queue.constants.ts',
        hash: '14575833334375058913',
      },
      { file: 'libs/shared/package.json', hash: '3158767309077371607' },
      { file: 'libs/shared/project.json', hash: '16399829923963356209' },
      { file: 'libs/shared/src/index.ts', hash: '15721632429446788800' },
      { file: 'libs/shared/src/lib/shared.spec.ts', hash: '10294249502165281269' },
      { file: 'libs/shared/src/lib/shared.ts', hash: '3815621113879200261' },
      { file: 'libs/shared/tsconfig.json', hash: '18145338037652904722' },
      { file: 'libs/shared/tsconfig.lib.json', hash: '3632393694954060084' },
      { file: 'libs/shared/tsconfig.spec.json', hash: '8059995630248237206' },
    ],
    application: [
      { file: 'libs/application/jest.config.cjs', hash: '7100839098075446499' },
      { file: 'libs/application/package.json', hash: '11487907614581869306' },
      { file: 'libs/application/project.json', hash: '5480059429127654029' },
      { file: 'libs/application/src/index.ts', hash: '7863879014726580698' },
      { file: 'libs/application/tsconfig.json', hash: '5954685850176823905' },
      { file: 'libs/application/tsconfig.lib.json', hash: '3632393694954060084' },
      { file: 'libs/application/tsconfig.spec.json', hash: '8059995630248237206' },
    ],
    infrastructure: [
      { file: 'libs/infrastructure/jest.config.cjs', hash: '7100839098075446499' },
      { file: 'libs/infrastructure/package.json', hash: '12490754485510435048', deps: ['domain'] },
      { file: 'libs/infrastructure/project.json', hash: '18395029545689300638' },
      {
        file: 'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
        hash: '8024987830979428585',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
        hash: '13288318018094258336',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/cache/cache.module.ts',
        hash: '5966046186415687522',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/cache/providers/redis.provider.ts',
        hash: '14842842419546536201',
      },
      { file: 'libs/infrastructure/src/index.ts', hash: '13405561518554489035' },
      {
        file: 'libs/infrastructure/src/persistence/persistence.module.ts',
        hash: '12531675043212898841',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
        hash: '6654390227564250262',
      },
      {
        file: 'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
        hash: '12489199801545699443',
      },
      {
        file: 'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
        hash: '5422938429425878142',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/queue/constants/queue.constants.ts',
        hash: '9326941270120179907',
      },
      { file: 'libs/infrastructure/src/queue/index.ts', hash: '17137520237830627583' },
      {
        file: 'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
        hash: '7518259202379747596',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/queue/queue.module.ts',
        hash: '5845069928326671835',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
        hash: '13522140832846089423',
        deps: ['domain'],
      },
      {
        file: 'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
        hash: '985675207362999549',
        deps: ['domain'],
      },
      { file: 'libs/infrastructure/tsconfig.json', hash: '5954685850176823905' },
      { file: 'libs/infrastructure/tsconfig.lib.json', hash: '3632393694954060084' },
      { file: 'libs/infrastructure/tsconfig.spec.json', hash: '8059995630248237206' },
    ],
    domain: [
      { file: 'libs/domain/.eslintrc.cjs', hash: '3092443701235677128' },
      { file: 'libs/domain/jest.config.cjs', hash: '7100839098075446499' },
      { file: 'libs/domain/package.json', hash: '8542841206610510581' },
      { file: 'libs/domain/project.json', hash: '1442841863366842786' },
      {
        file: 'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
        hash: '17777232650452756296',
      },
      {
        file: 'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
        hash: '10126133557739013707',
      },
      {
        file: 'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
        hash: '7565823834372294366',
      },
      {
        file: 'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
        hash: '989515628094545751',
      },
      { file: 'libs/domain/src/anti-ban/index.ts', hash: '5944340069489111544' },
      {
        file: 'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
        hash: '9655490779738657877',
      },
      {
        file: 'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
        hash: '5200612973500223095',
      },
      {
        file: 'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
        hash: '18361799768150040761',
      },
      {
        file: 'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
        hash: '12004010991659215304',
      },
      {
        file: 'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
        hash: '15442929026450513625',
      },
      {
        file: 'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
        hash: '15279276485661012756',
      },
      {
        file: 'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
        hash: '1453380852520673910',
      },
      { file: 'libs/domain/src/index.ts', hash: '5972252469164257818' },
      { file: 'libs/domain/src/leads/index.ts', hash: '12411758883760535767' },
      {
        file: 'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
        hash: '10232441094962840985',
      },
      {
        file: 'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
        hash: '12163806872597004226',
      },
      { file: 'libs/domain/tsconfig.json', hash: '5954685850176823905' },
      { file: 'libs/domain/tsconfig.lib.json', hash: '3632393694954060084' },
      { file: 'libs/domain/tsconfig.spec.json', hash: '35532611221615231' },
    ],
  },
  layout: { appsDir: 'apps', libsDir: 'libs' },
  affected: [],
  focus: null,
  groupByFolder: false,
  exclude: [],
  isPartial: false,
  connectedToCloud: true,
};
window.taskGraphResponse = {
  taskGraphs: {
    'infrastructure:build': {
      roots: ['domain:build'],
      tasks: {
        'infrastructure:build': {
          id: 'infrastructure:build',
          target: { project: 'infrastructure', target: 'build' },
          projectRoot: 'libs/infrastructure',
          overrides: {},
          outputs: ['dist/libs/infrastructure'],
          parallelism: true,
        },
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: { 'infrastructure:build': ['domain:build'], 'domain:build': [] },
    },
    'infrastructure:lint': {
      roots: ['infrastructure:lint'],
      tasks: {
        'infrastructure:lint': {
          id: 'infrastructure:lint',
          target: { project: 'infrastructure', target: 'lint' },
          projectRoot: 'libs/infrastructure',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'infrastructure:lint': [] },
    },
    'infrastructure:test': {
      roots: ['domain:build'],
      tasks: {
        'infrastructure:test': {
          id: 'infrastructure:test',
          target: { project: 'infrastructure', target: 'test' },
          projectRoot: 'libs/infrastructure',
          overrides: {},
          outputs: ['coverage/libs/infrastructure'],
          parallelism: true,
        },
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: { 'infrastructure:test': ['domain:build'], 'domain:build': [] },
    },
    'infrastructure:type-check': {
      roots: ['infrastructure:type-check'],
      tasks: {
        'infrastructure:type-check': {
          id: 'infrastructure:type-check',
          target: { project: 'infrastructure', target: 'type-check' },
          projectRoot: 'libs/infrastructure',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'infrastructure:type-check': [] },
    },
    'application:build': {
      roots: ['application:build'],
      tasks: {
        'application:build': {
          id: 'application:build',
          target: { project: 'application', target: 'build' },
          projectRoot: 'libs/application',
          overrides: {},
          outputs: ['dist/libs/application'],
          parallelism: true,
        },
      },
      dependencies: { 'application:build': [] },
    },
    'application:lint': {
      roots: ['application:lint'],
      tasks: {
        'application:lint': {
          id: 'application:lint',
          target: { project: 'application', target: 'lint' },
          projectRoot: 'libs/application',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'application:lint': [] },
    },
    'application:test': {
      roots: ['application:test'],
      tasks: {
        'application:test': {
          id: 'application:test',
          target: { project: 'application', target: 'test' },
          projectRoot: 'libs/application',
          overrides: {},
          outputs: ['coverage/libs/application'],
          parallelism: true,
        },
      },
      dependencies: { 'application:test': [] },
    },
    'application:type-check': {
      roots: ['application:type-check'],
      tasks: {
        'application:type-check': {
          id: 'application:type-check',
          target: { project: 'application', target: 'type-check' },
          projectRoot: 'libs/application',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'application:type-check': [] },
    },
    'api-e2e:e2e': {
      roots: ['domain:build'],
      tasks: {
        'api-e2e:e2e': {
          id: 'api-e2e:e2e',
          target: { project: 'api-e2e', target: 'e2e' },
          projectRoot: 'apps/api-e2e',
          overrides: {},
          outputs: ['coverage/{e2eProjectRoot}'],
          parallelism: true,
        },
        'api:build:production': {
          id: 'api:build:production',
          target: { project: 'api', target: 'build', configuration: 'production' },
          projectRoot: 'apps/api',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/apps/api'],
          parallelism: true,
        },
        'infrastructure:build': {
          id: 'infrastructure:build',
          target: { project: 'infrastructure', target: 'build' },
          projectRoot: 'libs/infrastructure',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/infrastructure'],
          parallelism: true,
        },
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: {
        'api-e2e:e2e': ['api:build:production'],
        'api:build:production': ['infrastructure:build'],
        'infrastructure:build': ['domain:build'],
        'domain:build': [],
      },
    },
    'domain:build': {
      roots: ['domain:build'],
      tasks: {
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: {},
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: { 'domain:build': [] },
    },
    'domain:lint': {
      roots: ['domain:lint'],
      tasks: {
        'domain:lint': {
          id: 'domain:lint',
          target: { project: 'domain', target: 'lint' },
          projectRoot: 'libs/domain',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'domain:lint': [] },
    },
    'domain:test': {
      roots: ['domain:test'],
      tasks: {
        'domain:test': {
          id: 'domain:test',
          target: { project: 'domain', target: 'test' },
          projectRoot: 'libs/domain',
          overrides: {},
          outputs: ['coverage/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: { 'domain:test': [] },
    },
    'domain:type-check': {
      roots: ['domain:type-check'],
      tasks: {
        'domain:type-check': {
          id: 'domain:type-check',
          target: { project: 'domain', target: 'type-check' },
          projectRoot: 'libs/domain',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'domain:type-check': [] },
    },
    'shared:build': {
      roots: ['shared:build'],
      tasks: {
        'shared:build': {
          id: 'shared:build',
          target: { project: 'shared', target: 'build' },
          projectRoot: 'libs/shared',
          overrides: {},
          outputs: ['dist/libs/shared'],
          parallelism: true,
        },
      },
      dependencies: { 'shared:build': [] },
    },
    'shared:lint': {
      roots: ['shared:lint'],
      tasks: {
        'shared:lint': {
          id: 'shared:lint',
          target: { project: 'shared', target: 'lint' },
          projectRoot: 'libs/shared',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'shared:lint': [] },
    },
    'shared:test': {
      roots: ['shared:test'],
      tasks: {
        'shared:test': {
          id: 'shared:test',
          target: { project: 'shared', target: 'test' },
          projectRoot: 'libs/shared',
          overrides: {},
          outputs: ['coverage/libs/shared'],
          parallelism: true,
        },
      },
      dependencies: { 'shared:test': [] },
    },
    'shared:type-check': {
      roots: ['shared:type-check'],
      tasks: {
        'shared:type-check': {
          id: 'shared:type-check',
          target: { project: 'shared', target: 'type-check' },
          projectRoot: 'libs/shared',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'shared:type-check': [] },
    },
    'api:build': {
      roots: ['domain:build'],
      tasks: {
        'api:build:production': {
          id: 'api:build:production',
          target: { project: 'api', target: 'build', configuration: 'production' },
          projectRoot: 'apps/api',
          overrides: {},
          outputs: ['dist/apps/api'],
          parallelism: true,
        },
        'infrastructure:build': {
          id: 'infrastructure:build',
          target: { project: 'infrastructure', target: 'build' },
          projectRoot: 'libs/infrastructure',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/infrastructure'],
          parallelism: true,
        },
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: {
        'api:build:production': ['infrastructure:build'],
        'infrastructure:build': ['domain:build'],
        'domain:build': [],
      },
    },
    'api:lint': {
      roots: ['api:lint'],
      tasks: {
        'api:lint': {
          id: 'api:lint',
          target: { project: 'api', target: 'lint' },
          projectRoot: 'apps/api',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'api:lint': [] },
    },
    'api:test': {
      roots: ['domain:build'],
      tasks: {
        'api:test': {
          id: 'api:test',
          target: { project: 'api', target: 'test' },
          projectRoot: 'apps/api',
          overrides: {},
          outputs: ['coverage/apps/api'],
          parallelism: true,
        },
        'infrastructure:build': {
          id: 'infrastructure:build',
          target: { project: 'infrastructure', target: 'build' },
          projectRoot: 'libs/infrastructure',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/infrastructure'],
          parallelism: true,
        },
        'domain:build': {
          id: 'domain:build',
          target: { project: 'domain', target: 'build' },
          projectRoot: 'libs/domain',
          overrides: { __overrides_unparsed__: [] },
          outputs: ['dist/libs/domain'],
          parallelism: true,
        },
      },
      dependencies: {
        'api:test': ['infrastructure:build'],
        'infrastructure:build': ['domain:build'],
        'domain:build': [],
      },
    },
    'api:type-check': {
      roots: ['api:type-check'],
      tasks: {
        'api:type-check': {
          id: 'api:type-check',
          target: { project: 'api', target: 'type-check' },
          projectRoot: 'apps/api',
          overrides: {},
          outputs: [],
          parallelism: true,
        },
      },
      dependencies: { 'api:type-check': [] },
    },
  },
  errors: {},
  plans: {
    'infrastructure:build': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'infrastructure:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'infrastructure:ProjectConfiguration',
      'domain:TsConfig',
      'infrastructure:TsConfig',
    ],
    'domain:build': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'domain:TsConfig',
    ],
    'infrastructure:lint': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/eslint.config.mjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'infrastructure:{projectRoot}/**/*',
      'infrastructure:ProjectConfiguration',
      'infrastructure:TsConfig',
    ],
    'infrastructure:test': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/jest.config.cjs,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'infrastructure:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'infrastructure:ProjectConfiguration',
      'domain:TsConfig',
      'infrastructure:TsConfig',
    ],
    'infrastructure:type-check': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'infrastructure:{projectRoot}/**/*',
      'infrastructure:ProjectConfiguration',
      'infrastructure:TsConfig',
      'AllExternalDependencies',
    ],
    'application:build': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'application:{projectRoot}/**/*',
      'application:ProjectConfiguration',
      'application:TsConfig',
    ],
    'application:lint': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/eslint.config.mjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'application:{projectRoot}/**/*',
      'application:ProjectConfiguration',
      'application:TsConfig',
    ],
    'application:test': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/jest.config.cjs,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'application:{projectRoot}/**/*',
      'application:ProjectConfiguration',
      'application:TsConfig',
    ],
    'application:type-check': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'application:{projectRoot}/**/*',
      'application:ProjectConfiguration',
      'application:TsConfig',
      'AllExternalDependencies',
    ],
    'api-e2e:e2e': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'api:{projectRoot}/**/*',
      'api-e2e:{projectRoot}/**/*',
      'domain:{projectRoot}/**/*',
      'infrastructure:{projectRoot}/**/*',
      'api:ProjectConfiguration',
      'api-e2e:ProjectConfiguration',
      'domain:ProjectConfiguration',
      'infrastructure:ProjectConfiguration',
      'api:TsConfig',
      'api-e2e:TsConfig',
      'domain:TsConfig',
      'infrastructure:TsConfig',
    ],
    'api:build:production': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'api:{projectRoot}/**/*',
      'domain:{projectRoot}/**/*',
      'infrastructure:{projectRoot}/**/*',
      'api:ProjectConfiguration',
      'domain:ProjectConfiguration',
      'infrastructure:ProjectConfiguration',
      'api:TsConfig',
      'domain:TsConfig',
      'infrastructure:TsConfig',
    ],
    'domain:lint': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/eslint.config.mjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'domain:TsConfig',
    ],
    'domain:test': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/jest.config.cjs,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'domain:TsConfig',
    ],
    'domain:type-check': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'domain:{projectRoot}/**/*',
      'domain:ProjectConfiguration',
      'domain:TsConfig',
      'AllExternalDependencies',
    ],
    'shared:build': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'shared:{projectRoot}/**/*',
      'shared:ProjectConfiguration',
      'shared:TsConfig',
    ],
    'shared:lint': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/eslint.config.mjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'shared:{projectRoot}/**/*',
      'shared:ProjectConfiguration',
      'shared:TsConfig',
    ],
    'shared:test': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/jest.config.cjs,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'shared:{projectRoot}/**/*',
      'shared:ProjectConfiguration',
      'shared:TsConfig',
    ],
    'shared:type-check': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'shared:{projectRoot}/**/*',
      'shared:ProjectConfiguration',
      'shared:TsConfig',
      'AllExternalDependencies',
    ],
    'api:lint': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/eslint.config.mjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'api:{projectRoot}/**/*',
      'api:ProjectConfiguration',
      'api:TsConfig',
    ],
    'api:test': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/jest.config.cjs,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'api:{projectRoot}/**/*',
      'domain:{projectRoot}/**/*',
      'infrastructure:{projectRoot}/**/*',
      'api:ProjectConfiguration',
      'domain:ProjectConfiguration',
      'infrastructure:ProjectConfiguration',
      'api:TsConfig',
      'domain:TsConfig',
      'infrastructure:TsConfig',
    ],
    'api:type-check': [
      'workspace:[{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs,{workspaceRoot}/bun.lockb,{workspaceRoot}/package.json,{workspaceRoot}/tsconfig.base.json,{workspaceRoot}/nx.json,{workspaceRoot}/eslint.config.mjs,{workspaceRoot}/.prettierrc,{workspaceRoot}/jest.preset.cjs]',
      'workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]',
      'env:NX_CLOUD_ENCRYPTION_KEY',
      'api:{projectRoot}/**/*',
      'api:ProjectConfiguration',
      'api:TsConfig',
      'AllExternalDependencies',
    ],
  },
};
window.expandedTaskInputsResponse = {
  'infrastructure:build': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'domain:build': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'infrastructure:lint': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'infrastructure:test': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.config.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'infrastructure:type-check': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'AllExternalDependencies',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'application:build': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    application: [
      'libs/application/jest.config.cjs',
      'libs/application/package.json',
      'libs/application/project.json',
      'libs/application/src/index.ts',
      'libs/application/tsconfig.json',
      'libs/application/tsconfig.lib.json',
      'libs/application/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'application:lint': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    application: [
      'libs/application/jest.config.cjs',
      'libs/application/package.json',
      'libs/application/project.json',
      'libs/application/src/index.ts',
      'libs/application/tsconfig.json',
      'libs/application/tsconfig.lib.json',
      'libs/application/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'application:test': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.config.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    application: [
      'libs/application/jest.config.cjs',
      'libs/application/package.json',
      'libs/application/project.json',
      'libs/application/src/index.ts',
      'libs/application/tsconfig.json',
      'libs/application/tsconfig.lib.json',
      'libs/application/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'application:type-check': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'AllExternalDependencies',
    ],
    application: [
      'libs/application/jest.config.cjs',
      'libs/application/package.json',
      'libs/application/project.json',
      'libs/application/src/index.ts',
      'libs/application/tsconfig.json',
      'libs/application/tsconfig.lib.json',
      'libs/application/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'api-e2e:e2e': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    'api-e2e': [
      'apps/api-e2e/jest.config.ts',
      'apps/api-e2e/project.json',
      'apps/api-e2e/src/api/api.spec.ts',
      'apps/api-e2e/src/support/global-setup.ts',
      'apps/api-e2e/src/support/global-teardown.ts',
      'apps/api-e2e/src/support/test-setup.ts',
      'apps/api-e2e/tsconfig.json',
      'apps/api-e2e/tsconfig.spec.json',
    ],
    api: [
      'apps/api/jest.config.cjs',
      'apps/api/package.json',
      'apps/api/project.json',
      'apps/api/src/app/app.controller.spec.ts',
      'apps/api/src/app/app.controller.ts',
      'apps/api/src/app/app.module.ts',
      'apps/api/src/app/app.placeholder.spec.ts',
      'apps/api/src/app/app.service.spec.ts',
      'apps/api/src/app/app.service.ts',
      'apps/api/src/assets/.gitkeep',
      'apps/api/src/main.ts',
      'apps/api/tsconfig.app.json',
      'apps/api/tsconfig.json',
      'apps/api/tsconfig.spec.json',
      'apps/api/webpack.config.cjs',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'api:build:production': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    api: [
      'apps/api/jest.config.cjs',
      'apps/api/package.json',
      'apps/api/project.json',
      'apps/api/src/app/app.controller.spec.ts',
      'apps/api/src/app/app.controller.ts',
      'apps/api/src/app/app.module.ts',
      'apps/api/src/app/app.placeholder.spec.ts',
      'apps/api/src/app/app.service.spec.ts',
      'apps/api/src/app/app.service.ts',
      'apps/api/src/assets/.gitkeep',
      'apps/api/src/main.ts',
      'apps/api/tsconfig.app.json',
      'apps/api/tsconfig.json',
      'apps/api/tsconfig.spec.json',
      'apps/api/webpack.config.cjs',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'domain:lint': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'domain:test': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.config.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'domain:type-check': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'AllExternalDependencies',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'shared:build': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    shared: [
      'libs/shared/README.md',
      'libs/shared/jest.config.cjs',
      'libs/shared/libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/shared/package.json',
      'libs/shared/project.json',
      'libs/shared/src/index.ts',
      'libs/shared/src/lib/shared.spec.ts',
      'libs/shared/src/lib/shared.ts',
      'libs/shared/tsconfig.json',
      'libs/shared/tsconfig.lib.json',
      'libs/shared/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'shared:lint': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    shared: [
      'libs/shared/README.md',
      'libs/shared/jest.config.cjs',
      'libs/shared/libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/shared/package.json',
      'libs/shared/project.json',
      'libs/shared/src/index.ts',
      'libs/shared/src/lib/shared.spec.ts',
      'libs/shared/src/lib/shared.ts',
      'libs/shared/tsconfig.json',
      'libs/shared/tsconfig.lib.json',
      'libs/shared/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'shared:test': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.config.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    shared: [
      'libs/shared/README.md',
      'libs/shared/jest.config.cjs',
      'libs/shared/libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/shared/package.json',
      'libs/shared/project.json',
      'libs/shared/src/index.ts',
      'libs/shared/src/lib/shared.spec.ts',
      'libs/shared/src/lib/shared.ts',
      'libs/shared/tsconfig.json',
      'libs/shared/tsconfig.lib.json',
      'libs/shared/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'shared:type-check': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'AllExternalDependencies',
    ],
    shared: [
      'libs/shared/README.md',
      'libs/shared/jest.config.cjs',
      'libs/shared/libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/shared/package.json',
      'libs/shared/project.json',
      'libs/shared/src/index.ts',
      'libs/shared/src/lib/shared.spec.ts',
      'libs/shared/src/lib/shared.ts',
      'libs/shared/tsconfig.json',
      'libs/shared/tsconfig.lib.json',
      'libs/shared/tsconfig.spec.json',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'api:lint': {
    general: [
      '.gitignore',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'package.json',
      'tsconfig.base.json',
    ],
    api: [
      'apps/api/jest.config.cjs',
      'apps/api/package.json',
      'apps/api/project.json',
      'apps/api/src/app/app.controller.spec.ts',
      'apps/api/src/app/app.controller.ts',
      'apps/api/src/app/app.module.ts',
      'apps/api/src/app/app.placeholder.spec.ts',
      'apps/api/src/app/app.service.spec.ts',
      'apps/api/src/app/app.service.ts',
      'apps/api/src/assets/.gitkeep',
      'apps/api/src/main.ts',
      'apps/api/tsconfig.app.json',
      'apps/api/tsconfig.json',
      'apps/api/tsconfig.spec.json',
      'apps/api/webpack.config.cjs',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'api:test': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.config.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
    ],
    infrastructure: [
      'libs/infrastructure/jest.config.cjs',
      'libs/infrastructure/package.json',
      'libs/infrastructure/project.json',
      'libs/infrastructure/src/cache/adapters/redis-health-tracker.adapter.ts',
      'libs/infrastructure/src/cache/adapters/redis-rate-limiter.adapter.ts',
      'libs/infrastructure/src/cache/cache.module.ts',
      'libs/infrastructure/src/cache/providers/redis.provider.ts',
      'libs/infrastructure/src/index.ts',
      'libs/infrastructure/src/persistence/persistence.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.module.ts',
      'libs/infrastructure/src/persistence/prisma/prisma.service.ts',
      'libs/infrastructure/src/persistence/prisma/repositories/prisma-whatsapp-account.repository.adapter.ts',
      'libs/infrastructure/src/queue/constants/queue.constants.ts',
      'libs/infrastructure/src/queue/index.ts',
      'libs/infrastructure/src/queue/processors/whatsapp-outbound.processor.ts',
      'libs/infrastructure/src/queue/queue.module.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/adapters/whatsapp-official-api.adapter.ts',
      'libs/infrastructure/src/whatsapp-cloud-api/whatsapp-cloud-api-infra.module.ts',
      'libs/infrastructure/tsconfig.json',
      'libs/infrastructure/tsconfig.lib.json',
      'libs/infrastructure/tsconfig.spec.json',
    ],
    domain: [
      'libs/domain/.eslintrc.cjs',
      'libs/domain/jest.config.cjs',
      'libs/domain/package.json',
      'libs/domain/project.json',
      'libs/domain/src/anti-ban/constants/anti-ban.constants.ts',
      'libs/domain/src/anti-ban/entities/whatsapp-account.entity.ts',
      'libs/domain/src/anti-ban/enums/sending-risk-level.enum.ts',
      'libs/domain/src/anti-ban/enums/whatsapp-account-status.enum.ts',
      'libs/domain/src/anti-ban/index.ts',
      'libs/domain/src/anti-ban/interfaces/message-validation-rule.interface.ts',
      'libs/domain/src/anti-ban/ports/ihealth-monitor.port.ts',
      'libs/domain/src/anti-ban/ports/irate-limiter.port.ts',
      'libs/domain/src/anti-ban/ports/iwhatsapp-account.repository.port.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.spec.ts',
      'libs/domain/src/anti-ban/services/anti-ban-decision.service.ts',
      'libs/domain/src/anti-ban/types/anti-ban-decision.type.ts',
      'libs/domain/src/index.ts',
      'libs/domain/src/leads/index.ts',
      'libs/domain/src/whatsapp/events/message-sent-status.event.ts',
      'libs/domain/src/whatsapp/ports/whatsapp-message.port.ts',
      'libs/domain/tsconfig.json',
      'libs/domain/tsconfig.lib.json',
      'libs/domain/tsconfig.spec.json',
    ],
    api: [
      'apps/api/jest.config.cjs',
      'apps/api/package.json',
      'apps/api/project.json',
      'apps/api/src/app/app.controller.spec.ts',
      'apps/api/src/app/app.controller.ts',
      'apps/api/src/app/app.module.ts',
      'apps/api/src/app/app.placeholder.spec.ts',
      'apps/api/src/app/app.service.spec.ts',
      'apps/api/src/app/app.service.ts',
      'apps/api/src/assets/.gitkeep',
      'apps/api/src/main.ts',
      'apps/api/tsconfig.app.json',
      'apps/api/tsconfig.json',
      'apps/api/tsconfig.spec.json',
      'apps/api/webpack.config.cjs',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
  'api:type-check': {
    general: [
      '.gitignore',
      '.prettierrc',
      '.prettierrc',
      'eslint.config.mjs',
      'eslint.config.mjs',
      'jest.preset.cjs',
      'jest.preset.cjs',
      'nx.json',
      'nx.json',
      'nx.json',
      'package.json',
      'package.json',
      'tsconfig.base.json',
      'tsconfig.base.json',
      'AllExternalDependencies',
    ],
    api: [
      'apps/api/jest.config.cjs',
      'apps/api/package.json',
      'apps/api/project.json',
      'apps/api/src/app/app.controller.spec.ts',
      'apps/api/src/app/app.controller.ts',
      'apps/api/src/app/app.module.ts',
      'apps/api/src/app/app.placeholder.spec.ts',
      'apps/api/src/app/app.service.spec.ts',
      'apps/api/src/app/app.service.ts',
      'apps/api/src/assets/.gitkeep',
      'apps/api/src/main.ts',
      'apps/api/tsconfig.app.json',
      'apps/api/tsconfig.json',
      'apps/api/tsconfig.spec.json',
      'apps/api/webpack.config.cjs',
    ],
    external: ['env:NX_CLOUD_ENCRYPTION_KEY'],
  },
};
window.sourceMapsResponse = {
  'apps/api': {
    root: ['apps/api/project.json', 'nx/core/project-json'],
    name: ['apps/api/project.json', 'nx/core/project-json'],
    projectType: ['apps/api/project.json', 'nx/core/project-json'],
    tags: ['apps/api/package.json', 'nx/core/package-json'],
    'tags.npm:private': ['apps/api/package.json', 'nx/core/package-json'],
    'metadata.targetGroups': ['apps/api/package.json', 'nx/core/package-json'],
    'metadata.js': ['apps/api/package.json', 'nx/core/package-json'],
    'metadata.js.packageName': ['apps/api/package.json', 'nx/core/package-json'],
    'metadata.js.isInPackageManagerWorkspaces': ['apps/api/package.json', 'nx/core/package-json'],
    targets: ['apps/api/package.json', 'nx/core/package-json'],
    $schema: ['apps/api/project.json', 'nx/core/project-json'],
    sourceRoot: ['apps/api/project.json', 'nx/core/project-json'],
    'tags.scope:api': ['apps/api/project.json', 'nx/core/project-json'],
    'tags.type:app': ['apps/api/project.json', 'nx/core/project-json'],
    'tags.framework:nest': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.executor': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.outputs': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.defaultConfiguration': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.configurations': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.target': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.compiler': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.outputPath': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.main': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.tsConfig': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.assets': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.webpackConfig': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.options.generatePackageJson': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.serve': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint.executor': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint.outputs': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint.options': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint.options.lintFilePatterns': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.lint.options.parserOptions': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test.executor': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test.outputs': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test.options': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test.options.jestConfig': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.test.options.passWithNoTests': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.type-check': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.type-check.executor': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.type-check.options': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.type-check.options.command': ['apps/api/project.json', 'nx/core/project-json'],
    'targets.build.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.build.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.build.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.lint.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.lint.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.test.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.test.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.test.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.parallelism': ['nx.json', 'nx/target-defaults'],
  },
  'libs/application': {
    root: ['libs/application/project.json', 'nx/core/project-json'],
    name: ['libs/application/project.json', 'nx/core/project-json'],
    projectType: ['libs/application/project.json', 'nx/core/project-json'],
    tags: ['libs/application/package.json', 'nx/core/package-json'],
    'tags.npm:private': ['libs/application/package.json', 'nx/core/package-json'],
    'metadata.targetGroups': ['libs/application/package.json', 'nx/core/package-json'],
    'metadata.js': ['libs/application/package.json', 'nx/core/package-json'],
    'metadata.js.packageName': ['libs/application/package.json', 'nx/core/package-json'],
    'metadata.js.packageMain': ['libs/application/package.json', 'nx/core/package-json'],
    'metadata.js.isInPackageManagerWorkspaces': [
      'libs/application/package.json',
      'nx/core/package-json',
    ],
    targets: ['libs/application/package.json', 'nx/core/package-json'],
    $schema: ['libs/application/project.json', 'nx/core/project-json'],
    sourceRoot: ['libs/application/project.json', 'nx/core/project-json'],
    'tags.scope:application': ['libs/application/project.json', 'nx/core/project-json'],
    'tags.type:lib': ['libs/application/project.json', 'nx/core/project-json'],
    'tags.layer:application': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.executor': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.outputs': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.options': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.options.outputPath': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.options.main': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.options.tsConfig': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.options.assets': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.lint': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.lint.executor': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.lint.outputs': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.lint.options': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.lint.options.lintFilePatterns': [
      'libs/application/project.json',
      'nx/core/project-json',
    ],
    'targets.lint.options.parserOptions': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.test': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.test.executor': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.test.outputs': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.test.options': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.test.options.jestConfig': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.type-check': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.type-check.executor': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.type-check.options': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.type-check.options.command': ['libs/application/project.json', 'nx/core/project-json'],
    'targets.build.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.build.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.build.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.lint.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.lint.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.test.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.test.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.test.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.parallelism': ['nx.json', 'nx/target-defaults'],
  },
  'libs/domain': {
    root: ['libs/domain/project.json', 'nx/core/project-json'],
    name: ['libs/domain/project.json', 'nx/core/project-json'],
    projectType: ['libs/domain/project.json', 'nx/core/project-json'],
    tags: ['libs/domain/package.json', 'nx/core/package-json'],
    'tags.npm:private': ['libs/domain/package.json', 'nx/core/package-json'],
    'metadata.targetGroups': ['libs/domain/package.json', 'nx/core/package-json'],
    'metadata.js': ['libs/domain/package.json', 'nx/core/package-json'],
    'metadata.js.packageName': ['libs/domain/package.json', 'nx/core/package-json'],
    'metadata.js.packageMain': ['libs/domain/package.json', 'nx/core/package-json'],
    'metadata.js.isInPackageManagerWorkspaces': [
      'libs/domain/package.json',
      'nx/core/package-json',
    ],
    targets: ['libs/domain/package.json', 'nx/core/package-json'],
    $schema: ['libs/domain/project.json', 'nx/core/project-json'],
    sourceRoot: ['libs/domain/project.json', 'nx/core/project-json'],
    'tags.scope:domain': ['libs/domain/project.json', 'nx/core/project-json'],
    'tags.type:lib': ['libs/domain/project.json', 'nx/core/project-json'],
    'tags.layer:domain': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.executor': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.outputs': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.options': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.options.outputPath': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.options.main': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.options.tsConfig': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.options.assets': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint.executor': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint.outputs': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint.options': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint.options.lintFilePatterns': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.lint.options.parserOptions': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.test': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.test.executor': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.test.outputs': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.test.options': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.test.options.jestConfig': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.type-check': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.type-check.executor': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.type-check.options': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.type-check.options.command': ['libs/domain/project.json', 'nx/core/project-json'],
    'targets.build.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.build.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.build.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.lint.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.lint.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.test.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.test.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.test.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.parallelism': ['nx.json', 'nx/target-defaults'],
  },
  'libs/infrastructure': {
    root: ['libs/infrastructure/project.json', 'nx/core/project-json'],
    name: ['libs/infrastructure/project.json', 'nx/core/project-json'],
    projectType: ['libs/infrastructure/project.json', 'nx/core/project-json'],
    tags: ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'tags.npm:private': ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'metadata.targetGroups': ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'metadata.js': ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'metadata.js.packageName': ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'metadata.js.packageMain': ['libs/infrastructure/package.json', 'nx/core/package-json'],
    'metadata.js.isInPackageManagerWorkspaces': [
      'libs/infrastructure/package.json',
      'nx/core/package-json',
    ],
    targets: ['libs/infrastructure/package.json', 'nx/core/package-json'],
    $schema: ['libs/infrastructure/project.json', 'nx/core/project-json'],
    sourceRoot: ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'tags.scope:infrastructure': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'tags.type:lib': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'tags.layer:infrastructure': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.executor': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.outputs': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.options': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.options.outputPath': [
      'libs/infrastructure/project.json',
      'nx/core/project-json',
    ],
    'targets.build.options.main': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.options.tsConfig': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.build.options.assets': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.lint': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.lint.executor': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.lint.outputs': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.lint.options': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.lint.options.lintFilePatterns': [
      'libs/infrastructure/project.json',
      'nx/core/project-json',
    ],
    'targets.lint.options.parserOptions': [
      'libs/infrastructure/project.json',
      'nx/core/project-json',
    ],
    'targets.test': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.test.executor': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.test.outputs': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.test.options': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.test.options.jestConfig': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.type-check': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.type-check.executor': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.type-check.options': ['libs/infrastructure/project.json', 'nx/core/project-json'],
    'targets.type-check.options.command': [
      'libs/infrastructure/project.json',
      'nx/core/project-json',
    ],
    'targets.build.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.build.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.build.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.lint.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.lint.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.test.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.test.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.test.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.parallelism': ['nx.json', 'nx/target-defaults'],
  },
  'libs/shared': {
    root: ['libs/shared/project.json', 'nx/core/project-json'],
    name: ['libs/shared/project.json', 'nx/core/project-json'],
    projectType: ['libs/shared/project.json', 'nx/core/project-json'],
    tags: ['libs/shared/package.json', 'nx/core/package-json'],
    'tags.npm:private': ['libs/shared/package.json', 'nx/core/package-json'],
    'metadata.targetGroups': ['libs/shared/package.json', 'nx/core/package-json'],
    'metadata.js': ['libs/shared/package.json', 'nx/core/package-json'],
    'metadata.js.packageName': ['libs/shared/package.json', 'nx/core/package-json'],
    'metadata.js.packageMain': ['libs/shared/package.json', 'nx/core/package-json'],
    'metadata.js.isInPackageManagerWorkspaces': [
      'libs/shared/package.json',
      'nx/core/package-json',
    ],
    targets: ['libs/shared/package.json', 'nx/core/package-json'],
    $schema: ['libs/shared/project.json', 'nx/core/project-json'],
    sourceRoot: ['libs/shared/project.json', 'nx/core/project-json'],
    'tags.scope:shared': ['libs/shared/project.json', 'nx/core/project-json'],
    'tags.type:lib': ['libs/shared/project.json', 'nx/core/project-json'],
    'tags.layer:shared': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.executor': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.outputs': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.options': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.options.outputPath': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.options.main': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.options.tsConfig': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.options.assets': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint.executor': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint.outputs': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint.options': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint.options.lintFilePatterns': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.lint.options.parserOptions': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.test': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.test.executor': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.test.outputs': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.test.options': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.test.options.jestConfig': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.type-check': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.type-check.executor': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.type-check.options': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.type-check.options.command': ['libs/shared/project.json', 'nx/core/project-json'],
    'targets.build.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.build.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.build.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.lint.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.lint.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.test.dependsOn': ['nx.json', 'nx/target-defaults'],
    'targets.test.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.test.parallelism': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.inputs': ['nx.json', 'nx/target-defaults'],
    'targets.type-check.parallelism': ['nx.json', 'nx/target-defaults'],
  },
  'apps/api-e2e': {
    root: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    name: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    $schema: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    projectType: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    implicitDependencies: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'implicitDependencies.api': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    targets: ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.executor': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.outputs': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.options': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.dependsOn': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.options.jestConfig': ['apps/api-e2e/project.json', 'nx/core/project-json'],
    'targets.e2e.options.passWithNoTests': ['apps/api-e2e/project.json', 'nx/core/project-json'],
  },
};
